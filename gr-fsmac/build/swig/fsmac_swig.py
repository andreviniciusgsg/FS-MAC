# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fsmac_swig', [dirname(__file__)])
        except ImportError:
            import _fsmac_swig
            return _fsmac_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_fsmac_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fsmac_swig = swig_import_helper()
    del swig_import_helper
else:
    import _fsmac_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _fsmac_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _fsmac_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _fsmac_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _fsmac_swig.high_res_timer_epoch()
class csma(object):
    """Proxy of C++ gr::fsmac::csma class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(mac_addr, dest_node, debug=False):
        """make(int mac_addr, int dest_node, bool debug=False) -> csma_sptr"""
        return _fsmac_swig.csma_make(mac_addr, dest_node, debug)

    make = staticmethod(make)
    __swig_destroy__ = _fsmac_swig.delete_csma
    __del__ = lambda self: None
csma_swigregister = _fsmac_swig.csma_swigregister
csma_swigregister(csma)

def csma_make(mac_addr, dest_node, debug=False):
    """csma_make(int mac_addr, int dest_node, bool debug=False) -> csma_sptr"""
    return _fsmac_swig.csma_make(mac_addr, dest_node, debug)

class csma_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fsmac::csma)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fsmac::csma)> self) -> csma_sptr
        __init__(boost::shared_ptr<(gr::fsmac::csma)> self, csma p) -> csma_sptr
        """
        this = _fsmac_swig.new_csma_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(csma_sptr self) -> csma"""
        return _fsmac_swig.csma_sptr___deref__(self)

    __swig_destroy__ = _fsmac_swig.delete_csma_sptr
    __del__ = lambda self: None

    def make(self, mac_addr, dest_node, debug=False):
        """make(csma_sptr self, int mac_addr, int dest_node, bool debug=False) -> csma_sptr"""
        return _fsmac_swig.csma_sptr_make(self, mac_addr, dest_node, debug)


    def history(self):
        """history(csma_sptr self) -> unsigned int"""
        return _fsmac_swig.csma_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(csma_sptr self, int which, int delay)
        declare_sample_delay(csma_sptr self, unsigned int delay)
        """
        return _fsmac_swig.csma_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(csma_sptr self, int which) -> unsigned int"""
        return _fsmac_swig.csma_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(csma_sptr self) -> int"""
        return _fsmac_swig.csma_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(csma_sptr self) -> double"""
        return _fsmac_swig.csma_sptr_relative_rate(self)


    def start(self):
        """start(csma_sptr self) -> bool"""
        return _fsmac_swig.csma_sptr_start(self)


    def stop(self):
        """stop(csma_sptr self) -> bool"""
        return _fsmac_swig.csma_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(csma_sptr self, unsigned int which_input) -> uint64_t"""
        return _fsmac_swig.csma_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(csma_sptr self, unsigned int which_output) -> uint64_t"""
        return _fsmac_swig.csma_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(csma_sptr self) -> int"""
        return _fsmac_swig.csma_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(csma_sptr self, int m)"""
        return _fsmac_swig.csma_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(csma_sptr self)"""
        return _fsmac_swig.csma_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(csma_sptr self) -> bool"""
        return _fsmac_swig.csma_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(csma_sptr self, int m)"""
        return _fsmac_swig.csma_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(csma_sptr self) -> int"""
        return _fsmac_swig.csma_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(csma_sptr self, int i) -> long"""
        return _fsmac_swig.csma_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(csma_sptr self, long max_output_buffer)
        set_max_output_buffer(csma_sptr self, int port, long max_output_buffer)
        """
        return _fsmac_swig.csma_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(csma_sptr self, int i) -> long"""
        return _fsmac_swig.csma_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(csma_sptr self, long min_output_buffer)
        set_min_output_buffer(csma_sptr self, int port, long min_output_buffer)
        """
        return _fsmac_swig.csma_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(csma_sptr self) -> float"""
        return _fsmac_swig.csma_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(csma_sptr self) -> float"""
        return _fsmac_swig.csma_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(csma_sptr self) -> float"""
        return _fsmac_swig.csma_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(csma_sptr self) -> float"""
        return _fsmac_swig.csma_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(csma_sptr self) -> float"""
        return _fsmac_swig.csma_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(csma_sptr self) -> float"""
        return _fsmac_swig.csma_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(csma_sptr self, int which) -> float
        pc_input_buffers_full(csma_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.csma_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(csma_sptr self, int which) -> float
        pc_input_buffers_full_avg(csma_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.csma_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(csma_sptr self, int which) -> float
        pc_input_buffers_full_var(csma_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.csma_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(csma_sptr self, int which) -> float
        pc_output_buffers_full(csma_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.csma_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(csma_sptr self, int which) -> float
        pc_output_buffers_full_avg(csma_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.csma_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(csma_sptr self, int which) -> float
        pc_output_buffers_full_var(csma_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.csma_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(csma_sptr self) -> float"""
        return _fsmac_swig.csma_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(csma_sptr self) -> float"""
        return _fsmac_swig.csma_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(csma_sptr self) -> float"""
        return _fsmac_swig.csma_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(csma_sptr self) -> float"""
        return _fsmac_swig.csma_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(csma_sptr self) -> float"""
        return _fsmac_swig.csma_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(csma_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fsmac_swig.csma_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(csma_sptr self)"""
        return _fsmac_swig.csma_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(csma_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fsmac_swig.csma_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(csma_sptr self) -> int"""
        return _fsmac_swig.csma_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(csma_sptr self) -> int"""
        return _fsmac_swig.csma_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(csma_sptr self, int priority) -> int"""
        return _fsmac_swig.csma_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(csma_sptr self) -> std::string"""
        return _fsmac_swig.csma_sptr_name(self)


    def symbol_name(self):
        """symbol_name(csma_sptr self) -> std::string"""
        return _fsmac_swig.csma_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(csma_sptr self) -> io_signature_sptr"""
        return _fsmac_swig.csma_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(csma_sptr self) -> io_signature_sptr"""
        return _fsmac_swig.csma_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(csma_sptr self) -> long"""
        return _fsmac_swig.csma_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(csma_sptr self) -> basic_block_sptr"""
        return _fsmac_swig.csma_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(csma_sptr self, int ninputs, int noutputs) -> bool"""
        return _fsmac_swig.csma_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(csma_sptr self) -> std::string"""
        return _fsmac_swig.csma_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(csma_sptr self, std::string name)"""
        return _fsmac_swig.csma_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(csma_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fsmac_swig.csma_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(csma_sptr self) -> swig_int_ptr"""
        return _fsmac_swig.csma_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(csma_sptr self) -> swig_int_ptr"""
        return _fsmac_swig.csma_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(csma_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fsmac_swig.csma_sptr_message_subscribers(self, which_port)

csma_sptr_swigregister = _fsmac_swig.csma_sptr_swigregister
csma_sptr_swigregister(csma_sptr)


csma_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
csma = csma.make;

class tdma(object):
    """Proxy of C++ gr::fsmac::tdma class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(mac_addr, dest_node, debug=False, is_coord=False):
        """make(int mac_addr, int dest_node, bool debug=False, bool is_coord=False) -> tdma_sptr"""
        return _fsmac_swig.tdma_make(mac_addr, dest_node, debug, is_coord)

    make = staticmethod(make)
    __swig_destroy__ = _fsmac_swig.delete_tdma
    __del__ = lambda self: None
tdma_swigregister = _fsmac_swig.tdma_swigregister
tdma_swigregister(tdma)

def tdma_make(mac_addr, dest_node, debug=False, is_coord=False):
    """tdma_make(int mac_addr, int dest_node, bool debug=False, bool is_coord=False) -> tdma_sptr"""
    return _fsmac_swig.tdma_make(mac_addr, dest_node, debug, is_coord)

class tdma_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fsmac::tdma)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fsmac::tdma)> self) -> tdma_sptr
        __init__(boost::shared_ptr<(gr::fsmac::tdma)> self, tdma p) -> tdma_sptr
        """
        this = _fsmac_swig.new_tdma_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(tdma_sptr self) -> tdma"""
        return _fsmac_swig.tdma_sptr___deref__(self)

    __swig_destroy__ = _fsmac_swig.delete_tdma_sptr
    __del__ = lambda self: None

    def make(self, mac_addr, dest_node, debug=False, is_coord=False):
        """make(tdma_sptr self, int mac_addr, int dest_node, bool debug=False, bool is_coord=False) -> tdma_sptr"""
        return _fsmac_swig.tdma_sptr_make(self, mac_addr, dest_node, debug, is_coord)


    def history(self):
        """history(tdma_sptr self) -> unsigned int"""
        return _fsmac_swig.tdma_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(tdma_sptr self, int which, int delay)
        declare_sample_delay(tdma_sptr self, unsigned int delay)
        """
        return _fsmac_swig.tdma_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(tdma_sptr self, int which) -> unsigned int"""
        return _fsmac_swig.tdma_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(tdma_sptr self) -> int"""
        return _fsmac_swig.tdma_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(tdma_sptr self) -> double"""
        return _fsmac_swig.tdma_sptr_relative_rate(self)


    def start(self):
        """start(tdma_sptr self) -> bool"""
        return _fsmac_swig.tdma_sptr_start(self)


    def stop(self):
        """stop(tdma_sptr self) -> bool"""
        return _fsmac_swig.tdma_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(tdma_sptr self, unsigned int which_input) -> uint64_t"""
        return _fsmac_swig.tdma_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(tdma_sptr self, unsigned int which_output) -> uint64_t"""
        return _fsmac_swig.tdma_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(tdma_sptr self) -> int"""
        return _fsmac_swig.tdma_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(tdma_sptr self, int m)"""
        return _fsmac_swig.tdma_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(tdma_sptr self)"""
        return _fsmac_swig.tdma_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(tdma_sptr self) -> bool"""
        return _fsmac_swig.tdma_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(tdma_sptr self, int m)"""
        return _fsmac_swig.tdma_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(tdma_sptr self) -> int"""
        return _fsmac_swig.tdma_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(tdma_sptr self, int i) -> long"""
        return _fsmac_swig.tdma_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(tdma_sptr self, long max_output_buffer)
        set_max_output_buffer(tdma_sptr self, int port, long max_output_buffer)
        """
        return _fsmac_swig.tdma_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(tdma_sptr self, int i) -> long"""
        return _fsmac_swig.tdma_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(tdma_sptr self, long min_output_buffer)
        set_min_output_buffer(tdma_sptr self, int port, long min_output_buffer)
        """
        return _fsmac_swig.tdma_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(tdma_sptr self) -> float"""
        return _fsmac_swig.tdma_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(tdma_sptr self) -> float"""
        return _fsmac_swig.tdma_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(tdma_sptr self) -> float"""
        return _fsmac_swig.tdma_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(tdma_sptr self) -> float"""
        return _fsmac_swig.tdma_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(tdma_sptr self) -> float"""
        return _fsmac_swig.tdma_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(tdma_sptr self) -> float"""
        return _fsmac_swig.tdma_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(tdma_sptr self, int which) -> float
        pc_input_buffers_full(tdma_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.tdma_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(tdma_sptr self, int which) -> float
        pc_input_buffers_full_avg(tdma_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.tdma_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(tdma_sptr self, int which) -> float
        pc_input_buffers_full_var(tdma_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.tdma_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(tdma_sptr self, int which) -> float
        pc_output_buffers_full(tdma_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.tdma_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(tdma_sptr self, int which) -> float
        pc_output_buffers_full_avg(tdma_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.tdma_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(tdma_sptr self, int which) -> float
        pc_output_buffers_full_var(tdma_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.tdma_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(tdma_sptr self) -> float"""
        return _fsmac_swig.tdma_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(tdma_sptr self) -> float"""
        return _fsmac_swig.tdma_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(tdma_sptr self) -> float"""
        return _fsmac_swig.tdma_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(tdma_sptr self) -> float"""
        return _fsmac_swig.tdma_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(tdma_sptr self) -> float"""
        return _fsmac_swig.tdma_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(tdma_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fsmac_swig.tdma_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(tdma_sptr self)"""
        return _fsmac_swig.tdma_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(tdma_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fsmac_swig.tdma_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(tdma_sptr self) -> int"""
        return _fsmac_swig.tdma_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(tdma_sptr self) -> int"""
        return _fsmac_swig.tdma_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(tdma_sptr self, int priority) -> int"""
        return _fsmac_swig.tdma_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(tdma_sptr self) -> std::string"""
        return _fsmac_swig.tdma_sptr_name(self)


    def symbol_name(self):
        """symbol_name(tdma_sptr self) -> std::string"""
        return _fsmac_swig.tdma_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(tdma_sptr self) -> io_signature_sptr"""
        return _fsmac_swig.tdma_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(tdma_sptr self) -> io_signature_sptr"""
        return _fsmac_swig.tdma_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(tdma_sptr self) -> long"""
        return _fsmac_swig.tdma_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(tdma_sptr self) -> basic_block_sptr"""
        return _fsmac_swig.tdma_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(tdma_sptr self, int ninputs, int noutputs) -> bool"""
        return _fsmac_swig.tdma_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(tdma_sptr self) -> std::string"""
        return _fsmac_swig.tdma_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(tdma_sptr self, std::string name)"""
        return _fsmac_swig.tdma_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(tdma_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fsmac_swig.tdma_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(tdma_sptr self) -> swig_int_ptr"""
        return _fsmac_swig.tdma_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(tdma_sptr self) -> swig_int_ptr"""
        return _fsmac_swig.tdma_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(tdma_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fsmac_swig.tdma_sptr_message_subscribers(self, which_port)

tdma_sptr_swigregister = _fsmac_swig.tdma_sptr_swigregister
tdma_sptr_swigregister(tdma_sptr)


tdma_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
tdma = tdma.make;

class sens_num_senders(object):
    """Proxy of C++ gr::fsmac::sens_num_senders class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> sens_num_senders_sptr"""
        return _fsmac_swig.sens_num_senders_make()

    make = staticmethod(make)
    __swig_destroy__ = _fsmac_swig.delete_sens_num_senders
    __del__ = lambda self: None
sens_num_senders_swigregister = _fsmac_swig.sens_num_senders_swigregister
sens_num_senders_swigregister(sens_num_senders)

def sens_num_senders_make():
    """sens_num_senders_make() -> sens_num_senders_sptr"""
    return _fsmac_swig.sens_num_senders_make()

class sens_num_senders_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fsmac::sens_num_senders)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fsmac::sens_num_senders)> self) -> sens_num_senders_sptr
        __init__(boost::shared_ptr<(gr::fsmac::sens_num_senders)> self, sens_num_senders p) -> sens_num_senders_sptr
        """
        this = _fsmac_swig.new_sens_num_senders_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(sens_num_senders_sptr self) -> sens_num_senders"""
        return _fsmac_swig.sens_num_senders_sptr___deref__(self)

    __swig_destroy__ = _fsmac_swig.delete_sens_num_senders_sptr
    __del__ = lambda self: None

    def make(self):
        """make(sens_num_senders_sptr self) -> sens_num_senders_sptr"""
        return _fsmac_swig.sens_num_senders_sptr_make(self)


    def history(self):
        """history(sens_num_senders_sptr self) -> unsigned int"""
        return _fsmac_swig.sens_num_senders_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sens_num_senders_sptr self, int which, int delay)
        declare_sample_delay(sens_num_senders_sptr self, unsigned int delay)
        """
        return _fsmac_swig.sens_num_senders_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(sens_num_senders_sptr self, int which) -> unsigned int"""
        return _fsmac_swig.sens_num_senders_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(sens_num_senders_sptr self) -> int"""
        return _fsmac_swig.sens_num_senders_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(sens_num_senders_sptr self) -> double"""
        return _fsmac_swig.sens_num_senders_sptr_relative_rate(self)


    def start(self):
        """start(sens_num_senders_sptr self) -> bool"""
        return _fsmac_swig.sens_num_senders_sptr_start(self)


    def stop(self):
        """stop(sens_num_senders_sptr self) -> bool"""
        return _fsmac_swig.sens_num_senders_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(sens_num_senders_sptr self, unsigned int which_input) -> uint64_t"""
        return _fsmac_swig.sens_num_senders_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(sens_num_senders_sptr self, unsigned int which_output) -> uint64_t"""
        return _fsmac_swig.sens_num_senders_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(sens_num_senders_sptr self) -> int"""
        return _fsmac_swig.sens_num_senders_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(sens_num_senders_sptr self, int m)"""
        return _fsmac_swig.sens_num_senders_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sens_num_senders_sptr self)"""
        return _fsmac_swig.sens_num_senders_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sens_num_senders_sptr self) -> bool"""
        return _fsmac_swig.sens_num_senders_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(sens_num_senders_sptr self, int m)"""
        return _fsmac_swig.sens_num_senders_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(sens_num_senders_sptr self) -> int"""
        return _fsmac_swig.sens_num_senders_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(sens_num_senders_sptr self, int i) -> long"""
        return _fsmac_swig.sens_num_senders_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sens_num_senders_sptr self, long max_output_buffer)
        set_max_output_buffer(sens_num_senders_sptr self, int port, long max_output_buffer)
        """
        return _fsmac_swig.sens_num_senders_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(sens_num_senders_sptr self, int i) -> long"""
        return _fsmac_swig.sens_num_senders_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sens_num_senders_sptr self, long min_output_buffer)
        set_min_output_buffer(sens_num_senders_sptr self, int port, long min_output_buffer)
        """
        return _fsmac_swig.sens_num_senders_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(sens_num_senders_sptr self) -> float"""
        return _fsmac_swig.sens_num_senders_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sens_num_senders_sptr self) -> float"""
        return _fsmac_swig.sens_num_senders_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sens_num_senders_sptr self) -> float"""
        return _fsmac_swig.sens_num_senders_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(sens_num_senders_sptr self) -> float"""
        return _fsmac_swig.sens_num_senders_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sens_num_senders_sptr self) -> float"""
        return _fsmac_swig.sens_num_senders_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(sens_num_senders_sptr self) -> float"""
        return _fsmac_swig.sens_num_senders_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sens_num_senders_sptr self, int which) -> float
        pc_input_buffers_full(sens_num_senders_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.sens_num_senders_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sens_num_senders_sptr self, int which) -> float
        pc_input_buffers_full_avg(sens_num_senders_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.sens_num_senders_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sens_num_senders_sptr self, int which) -> float
        pc_input_buffers_full_var(sens_num_senders_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.sens_num_senders_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sens_num_senders_sptr self, int which) -> float
        pc_output_buffers_full(sens_num_senders_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.sens_num_senders_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sens_num_senders_sptr self, int which) -> float
        pc_output_buffers_full_avg(sens_num_senders_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.sens_num_senders_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sens_num_senders_sptr self, int which) -> float
        pc_output_buffers_full_var(sens_num_senders_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.sens_num_senders_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(sens_num_senders_sptr self) -> float"""
        return _fsmac_swig.sens_num_senders_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(sens_num_senders_sptr self) -> float"""
        return _fsmac_swig.sens_num_senders_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(sens_num_senders_sptr self) -> float"""
        return _fsmac_swig.sens_num_senders_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(sens_num_senders_sptr self) -> float"""
        return _fsmac_swig.sens_num_senders_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(sens_num_senders_sptr self) -> float"""
        return _fsmac_swig.sens_num_senders_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(sens_num_senders_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fsmac_swig.sens_num_senders_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(sens_num_senders_sptr self)"""
        return _fsmac_swig.sens_num_senders_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(sens_num_senders_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fsmac_swig.sens_num_senders_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(sens_num_senders_sptr self) -> int"""
        return _fsmac_swig.sens_num_senders_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(sens_num_senders_sptr self) -> int"""
        return _fsmac_swig.sens_num_senders_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(sens_num_senders_sptr self, int priority) -> int"""
        return _fsmac_swig.sens_num_senders_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(sens_num_senders_sptr self) -> std::string"""
        return _fsmac_swig.sens_num_senders_sptr_name(self)


    def symbol_name(self):
        """symbol_name(sens_num_senders_sptr self) -> std::string"""
        return _fsmac_swig.sens_num_senders_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(sens_num_senders_sptr self) -> io_signature_sptr"""
        return _fsmac_swig.sens_num_senders_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(sens_num_senders_sptr self) -> io_signature_sptr"""
        return _fsmac_swig.sens_num_senders_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(sens_num_senders_sptr self) -> long"""
        return _fsmac_swig.sens_num_senders_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(sens_num_senders_sptr self) -> basic_block_sptr"""
        return _fsmac_swig.sens_num_senders_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(sens_num_senders_sptr self, int ninputs, int noutputs) -> bool"""
        return _fsmac_swig.sens_num_senders_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(sens_num_senders_sptr self) -> std::string"""
        return _fsmac_swig.sens_num_senders_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(sens_num_senders_sptr self, std::string name)"""
        return _fsmac_swig.sens_num_senders_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(sens_num_senders_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fsmac_swig.sens_num_senders_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(sens_num_senders_sptr self) -> swig_int_ptr"""
        return _fsmac_swig.sens_num_senders_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(sens_num_senders_sptr self) -> swig_int_ptr"""
        return _fsmac_swig.sens_num_senders_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(sens_num_senders_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fsmac_swig.sens_num_senders_sptr_message_subscribers(self, which_port)

sens_num_senders_sptr_swigregister = _fsmac_swig.sens_num_senders_sptr_swigregister
sens_num_senders_sptr_swigregister(sens_num_senders_sptr)


sens_num_senders_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sens_num_senders = sens_num_senders.make;

class exchanger(object):
    """Proxy of C++ gr::fsmac::exchanger class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(is_coord=False):
        """make(bool is_coord=False) -> exchanger_sptr"""
        return _fsmac_swig.exchanger_make(is_coord)

    make = staticmethod(make)
    __swig_destroy__ = _fsmac_swig.delete_exchanger
    __del__ = lambda self: None
exchanger_swigregister = _fsmac_swig.exchanger_swigregister
exchanger_swigregister(exchanger)

def exchanger_make(is_coord=False):
    """exchanger_make(bool is_coord=False) -> exchanger_sptr"""
    return _fsmac_swig.exchanger_make(is_coord)

class exchanger_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fsmac::exchanger)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fsmac::exchanger)> self) -> exchanger_sptr
        __init__(boost::shared_ptr<(gr::fsmac::exchanger)> self, exchanger p) -> exchanger_sptr
        """
        this = _fsmac_swig.new_exchanger_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(exchanger_sptr self) -> exchanger"""
        return _fsmac_swig.exchanger_sptr___deref__(self)

    __swig_destroy__ = _fsmac_swig.delete_exchanger_sptr
    __del__ = lambda self: None

    def make(self, is_coord=False):
        """make(exchanger_sptr self, bool is_coord=False) -> exchanger_sptr"""
        return _fsmac_swig.exchanger_sptr_make(self, is_coord)


    def history(self):
        """history(exchanger_sptr self) -> unsigned int"""
        return _fsmac_swig.exchanger_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(exchanger_sptr self, int which, int delay)
        declare_sample_delay(exchanger_sptr self, unsigned int delay)
        """
        return _fsmac_swig.exchanger_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(exchanger_sptr self, int which) -> unsigned int"""
        return _fsmac_swig.exchanger_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(exchanger_sptr self) -> int"""
        return _fsmac_swig.exchanger_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(exchanger_sptr self) -> double"""
        return _fsmac_swig.exchanger_sptr_relative_rate(self)


    def start(self):
        """start(exchanger_sptr self) -> bool"""
        return _fsmac_swig.exchanger_sptr_start(self)


    def stop(self):
        """stop(exchanger_sptr self) -> bool"""
        return _fsmac_swig.exchanger_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(exchanger_sptr self, unsigned int which_input) -> uint64_t"""
        return _fsmac_swig.exchanger_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(exchanger_sptr self, unsigned int which_output) -> uint64_t"""
        return _fsmac_swig.exchanger_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(exchanger_sptr self) -> int"""
        return _fsmac_swig.exchanger_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(exchanger_sptr self, int m)"""
        return _fsmac_swig.exchanger_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(exchanger_sptr self)"""
        return _fsmac_swig.exchanger_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(exchanger_sptr self) -> bool"""
        return _fsmac_swig.exchanger_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(exchanger_sptr self, int m)"""
        return _fsmac_swig.exchanger_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(exchanger_sptr self) -> int"""
        return _fsmac_swig.exchanger_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(exchanger_sptr self, int i) -> long"""
        return _fsmac_swig.exchanger_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(exchanger_sptr self, long max_output_buffer)
        set_max_output_buffer(exchanger_sptr self, int port, long max_output_buffer)
        """
        return _fsmac_swig.exchanger_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(exchanger_sptr self, int i) -> long"""
        return _fsmac_swig.exchanger_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(exchanger_sptr self, long min_output_buffer)
        set_min_output_buffer(exchanger_sptr self, int port, long min_output_buffer)
        """
        return _fsmac_swig.exchanger_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(exchanger_sptr self) -> float"""
        return _fsmac_swig.exchanger_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(exchanger_sptr self) -> float"""
        return _fsmac_swig.exchanger_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(exchanger_sptr self) -> float"""
        return _fsmac_swig.exchanger_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(exchanger_sptr self) -> float"""
        return _fsmac_swig.exchanger_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(exchanger_sptr self) -> float"""
        return _fsmac_swig.exchanger_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(exchanger_sptr self) -> float"""
        return _fsmac_swig.exchanger_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(exchanger_sptr self, int which) -> float
        pc_input_buffers_full(exchanger_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.exchanger_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(exchanger_sptr self, int which) -> float
        pc_input_buffers_full_avg(exchanger_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.exchanger_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(exchanger_sptr self, int which) -> float
        pc_input_buffers_full_var(exchanger_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.exchanger_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(exchanger_sptr self, int which) -> float
        pc_output_buffers_full(exchanger_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.exchanger_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(exchanger_sptr self, int which) -> float
        pc_output_buffers_full_avg(exchanger_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.exchanger_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(exchanger_sptr self, int which) -> float
        pc_output_buffers_full_var(exchanger_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.exchanger_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(exchanger_sptr self) -> float"""
        return _fsmac_swig.exchanger_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(exchanger_sptr self) -> float"""
        return _fsmac_swig.exchanger_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(exchanger_sptr self) -> float"""
        return _fsmac_swig.exchanger_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(exchanger_sptr self) -> float"""
        return _fsmac_swig.exchanger_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(exchanger_sptr self) -> float"""
        return _fsmac_swig.exchanger_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(exchanger_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fsmac_swig.exchanger_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(exchanger_sptr self)"""
        return _fsmac_swig.exchanger_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(exchanger_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fsmac_swig.exchanger_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(exchanger_sptr self) -> int"""
        return _fsmac_swig.exchanger_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(exchanger_sptr self) -> int"""
        return _fsmac_swig.exchanger_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(exchanger_sptr self, int priority) -> int"""
        return _fsmac_swig.exchanger_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(exchanger_sptr self) -> std::string"""
        return _fsmac_swig.exchanger_sptr_name(self)


    def symbol_name(self):
        """symbol_name(exchanger_sptr self) -> std::string"""
        return _fsmac_swig.exchanger_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(exchanger_sptr self) -> io_signature_sptr"""
        return _fsmac_swig.exchanger_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(exchanger_sptr self) -> io_signature_sptr"""
        return _fsmac_swig.exchanger_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(exchanger_sptr self) -> long"""
        return _fsmac_swig.exchanger_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(exchanger_sptr self) -> basic_block_sptr"""
        return _fsmac_swig.exchanger_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(exchanger_sptr self, int ninputs, int noutputs) -> bool"""
        return _fsmac_swig.exchanger_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(exchanger_sptr self) -> std::string"""
        return _fsmac_swig.exchanger_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(exchanger_sptr self, std::string name)"""
        return _fsmac_swig.exchanger_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(exchanger_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fsmac_swig.exchanger_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(exchanger_sptr self) -> swig_int_ptr"""
        return _fsmac_swig.exchanger_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(exchanger_sptr self) -> swig_int_ptr"""
        return _fsmac_swig.exchanger_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(exchanger_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fsmac_swig.exchanger_sptr_message_subscribers(self, which_port)

exchanger_sptr_swigregister = _fsmac_swig.exchanger_sptr_swigregister
exchanger_sptr_swigregister(exchanger_sptr)


exchanger_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
exchanger = exchanger.make;

class latency_sensor(object):
    """Proxy of C++ gr::fsmac::latency_sensor class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(is_coord=False):
        """make(bool is_coord=False) -> latency_sensor_sptr"""
        return _fsmac_swig.latency_sensor_make(is_coord)

    make = staticmethod(make)
    __swig_destroy__ = _fsmac_swig.delete_latency_sensor
    __del__ = lambda self: None
latency_sensor_swigregister = _fsmac_swig.latency_sensor_swigregister
latency_sensor_swigregister(latency_sensor)

def latency_sensor_make(is_coord=False):
    """latency_sensor_make(bool is_coord=False) -> latency_sensor_sptr"""
    return _fsmac_swig.latency_sensor_make(is_coord)

class latency_sensor_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fsmac::latency_sensor)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fsmac::latency_sensor)> self) -> latency_sensor_sptr
        __init__(boost::shared_ptr<(gr::fsmac::latency_sensor)> self, latency_sensor p) -> latency_sensor_sptr
        """
        this = _fsmac_swig.new_latency_sensor_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(latency_sensor_sptr self) -> latency_sensor"""
        return _fsmac_swig.latency_sensor_sptr___deref__(self)

    __swig_destroy__ = _fsmac_swig.delete_latency_sensor_sptr
    __del__ = lambda self: None

    def make(self, is_coord=False):
        """make(latency_sensor_sptr self, bool is_coord=False) -> latency_sensor_sptr"""
        return _fsmac_swig.latency_sensor_sptr_make(self, is_coord)


    def history(self):
        """history(latency_sensor_sptr self) -> unsigned int"""
        return _fsmac_swig.latency_sensor_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(latency_sensor_sptr self, int which, int delay)
        declare_sample_delay(latency_sensor_sptr self, unsigned int delay)
        """
        return _fsmac_swig.latency_sensor_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(latency_sensor_sptr self, int which) -> unsigned int"""
        return _fsmac_swig.latency_sensor_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(latency_sensor_sptr self) -> int"""
        return _fsmac_swig.latency_sensor_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(latency_sensor_sptr self) -> double"""
        return _fsmac_swig.latency_sensor_sptr_relative_rate(self)


    def start(self):
        """start(latency_sensor_sptr self) -> bool"""
        return _fsmac_swig.latency_sensor_sptr_start(self)


    def stop(self):
        """stop(latency_sensor_sptr self) -> bool"""
        return _fsmac_swig.latency_sensor_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(latency_sensor_sptr self, unsigned int which_input) -> uint64_t"""
        return _fsmac_swig.latency_sensor_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(latency_sensor_sptr self, unsigned int which_output) -> uint64_t"""
        return _fsmac_swig.latency_sensor_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(latency_sensor_sptr self) -> int"""
        return _fsmac_swig.latency_sensor_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(latency_sensor_sptr self, int m)"""
        return _fsmac_swig.latency_sensor_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(latency_sensor_sptr self)"""
        return _fsmac_swig.latency_sensor_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(latency_sensor_sptr self) -> bool"""
        return _fsmac_swig.latency_sensor_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(latency_sensor_sptr self, int m)"""
        return _fsmac_swig.latency_sensor_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(latency_sensor_sptr self) -> int"""
        return _fsmac_swig.latency_sensor_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(latency_sensor_sptr self, int i) -> long"""
        return _fsmac_swig.latency_sensor_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(latency_sensor_sptr self, long max_output_buffer)
        set_max_output_buffer(latency_sensor_sptr self, int port, long max_output_buffer)
        """
        return _fsmac_swig.latency_sensor_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(latency_sensor_sptr self, int i) -> long"""
        return _fsmac_swig.latency_sensor_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(latency_sensor_sptr self, long min_output_buffer)
        set_min_output_buffer(latency_sensor_sptr self, int port, long min_output_buffer)
        """
        return _fsmac_swig.latency_sensor_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(latency_sensor_sptr self) -> float"""
        return _fsmac_swig.latency_sensor_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(latency_sensor_sptr self) -> float"""
        return _fsmac_swig.latency_sensor_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(latency_sensor_sptr self) -> float"""
        return _fsmac_swig.latency_sensor_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(latency_sensor_sptr self) -> float"""
        return _fsmac_swig.latency_sensor_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(latency_sensor_sptr self) -> float"""
        return _fsmac_swig.latency_sensor_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(latency_sensor_sptr self) -> float"""
        return _fsmac_swig.latency_sensor_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(latency_sensor_sptr self, int which) -> float
        pc_input_buffers_full(latency_sensor_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.latency_sensor_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(latency_sensor_sptr self, int which) -> float
        pc_input_buffers_full_avg(latency_sensor_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.latency_sensor_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(latency_sensor_sptr self, int which) -> float
        pc_input_buffers_full_var(latency_sensor_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.latency_sensor_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(latency_sensor_sptr self, int which) -> float
        pc_output_buffers_full(latency_sensor_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.latency_sensor_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(latency_sensor_sptr self, int which) -> float
        pc_output_buffers_full_avg(latency_sensor_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.latency_sensor_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(latency_sensor_sptr self, int which) -> float
        pc_output_buffers_full_var(latency_sensor_sptr self) -> pmt_vector_float
        """
        return _fsmac_swig.latency_sensor_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(latency_sensor_sptr self) -> float"""
        return _fsmac_swig.latency_sensor_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(latency_sensor_sptr self) -> float"""
        return _fsmac_swig.latency_sensor_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(latency_sensor_sptr self) -> float"""
        return _fsmac_swig.latency_sensor_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(latency_sensor_sptr self) -> float"""
        return _fsmac_swig.latency_sensor_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(latency_sensor_sptr self) -> float"""
        return _fsmac_swig.latency_sensor_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(latency_sensor_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fsmac_swig.latency_sensor_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(latency_sensor_sptr self)"""
        return _fsmac_swig.latency_sensor_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(latency_sensor_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fsmac_swig.latency_sensor_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(latency_sensor_sptr self) -> int"""
        return _fsmac_swig.latency_sensor_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(latency_sensor_sptr self) -> int"""
        return _fsmac_swig.latency_sensor_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(latency_sensor_sptr self, int priority) -> int"""
        return _fsmac_swig.latency_sensor_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(latency_sensor_sptr self) -> std::string"""
        return _fsmac_swig.latency_sensor_sptr_name(self)


    def symbol_name(self):
        """symbol_name(latency_sensor_sptr self) -> std::string"""
        return _fsmac_swig.latency_sensor_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(latency_sensor_sptr self) -> io_signature_sptr"""
        return _fsmac_swig.latency_sensor_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(latency_sensor_sptr self) -> io_signature_sptr"""
        return _fsmac_swig.latency_sensor_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(latency_sensor_sptr self) -> long"""
        return _fsmac_swig.latency_sensor_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(latency_sensor_sptr self) -> basic_block_sptr"""
        return _fsmac_swig.latency_sensor_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(latency_sensor_sptr self, int ninputs, int noutputs) -> bool"""
        return _fsmac_swig.latency_sensor_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(latency_sensor_sptr self) -> std::string"""
        return _fsmac_swig.latency_sensor_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(latency_sensor_sptr self, std::string name)"""
        return _fsmac_swig.latency_sensor_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(latency_sensor_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fsmac_swig.latency_sensor_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(latency_sensor_sptr self) -> swig_int_ptr"""
        return _fsmac_swig.latency_sensor_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(latency_sensor_sptr self) -> swig_int_ptr"""
        return _fsmac_swig.latency_sensor_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(latency_sensor_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fsmac_swig.latency_sensor_sptr_message_subscribers(self, which_port)

latency_sensor_sptr_swigregister = _fsmac_swig.latency_sensor_sptr_swigregister
latency_sensor_sptr_swigregister(latency_sensor_sptr)


latency_sensor_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
latency_sensor = latency_sensor.make;



